#!/bin/bash

# Copyright 2019 ThoughtSpot
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
# OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# WARNING:  THIS FILE SHOULD NOT NEED TO BE MODIFIED.

# This file will load data files into ThoughtSpot using tsload.  It expects a configuration file to be provided.  

# Needed when running from cron since this path is set in /home/admin/.bashrc - tsload is in this path.
PATH=$PATH:/usr/local/scaligent/bin:/usr/local/scaligent/release/bin

# Show the usage of the file.
function usage() {
  exit_code=$1

  echo ""
  echo "usage: ${0} -f CONFIG_FILE"
  echo "  where CONFIG_FILE is a configuration file for the loading."
  echo ""
  exit ${exit_code}
}

# Makes sure correct directories exist and creates where appropriate or exits with an error.
function check_directories() {
  if [ ! -e ${DATA_DIR} ]; then
    echo "Required data directory ${DATA_DIR} not found.  Exiting."
    exit -1
  fi

  # Just create the others if they don't exist.
  if [ ! -e ${LOG_DIR} ]; then mkdir -p ${LOG_DIR}; fi
  if [ ! -e ${OLD_DIR} ]; then mkdir -p ${OLD_DIR}; fi
  if [ ! -e ${OLD_DIR}/data ]; then mkdir -p ${OLD_DIR}/data; fi
}

# See if there is a semaphore file.  If so, see if it exists.
check_for_semaphore() {
  if [[ ${SEMAPHORE_FILE_NAME} != "" ]]; then
    if [ ! -f ${DATA_DIR}/${SEMAPHORE_FILE_NAME} ]; then
      echo "no semaphore file ${DATA_DIR}/${SEMAPHORE_FILE_NAME} exists."
      exit 0
    fi
  fi
}

# Make sure there is only one load process at a time.  Also recover if a process failed.  
# NOTE that this checks the local process space, so it's possible another load is running on another machine.
# TODO:  Create a process for handling multi-node environments to prevent loads on another machine.
function check_already_loading() {
  if [ -f ${LOADING_FILE} ]; then
    other_pid=`head -n 1 ${LOADING_FILE}`
    running_pid=`ps -ef | awk '{ print $2 }' | grep $other_pid`
    if [ "$running_pid" == "" ]; then
      echo $$ > ${LOADING_FILE}
      echo "" > ${TEMP_RESULTS_FILE}  # create file for logging results.
      echo "Taking over from stopped process $other_pid" > ${TEMP_RESULTS_FILE}
    else
      exit 0
    fi
  else
    echo "" > ${TEMP_RESULTS_FILE}  # create file for logging results.
    echo $$ > ${LOADING_FILE}
  fi
}

# Function to see if an element exists in an array.  
function contains_element() {
  local element="$1"
  local array="$2"
  for e in $2; do 
    if [[ "$e" == "$element" ]]; then
      return 0
    fi
  done
  return 1
}

# Variables to log errors and loading.
has_tsload_errors=false
number_successful_loads=0
total_attempted_files=0

# This variable contains tables that have been truncated before loading parts.
# This only supports one database.
truncated_tables=()

# Loads one file into a table using tsload.
function load_a_file() {
  file_name=$1
  database_name=$2
  schema_name=$3
  table_name=$4
  empty_target=$5

  echo "Loading $1 into ${database_name}.${schema_name}.${table_name}"
  total_attempted_files=$((total_attempted_files + 1))

  # See if we should truncate the table before loading.
  if [ ${TRUNCATE_BEFORE_LOAD} == "true" ]; then
    contains_element "${schema_name}"."$tn" ${truncated_tables[@]} 
    if [[ $? != 0 ]]; then  # this is table that should be truncated.
      truncated_tables+=("${schema_name}"."$tn")
      echo "truncate table ${database_name}.${schema_name}.${tn};" | tql
    fi
  fi

  # get the header flag.
  hhr=""
  if [[ ${HAS_HEADER_ROW} == "true" ]]; then
    hhr="--has_header_row"
  fi

  # Directory for loaded data and bad records.
  move_dir="${OLD_DIR}/data/${schema_name}"
  if [ ! -e ${move_dir} ]; then mkdir -p ${move_dir}; fi

  # The specific flags are set in the configuration file.
  cat ${file_name} | \
    tsload --target_database ${database_name} \
           --target_schema ${schema_name} \
           --target_table ${table_name} \
           --bad_records_file ${move_dir}/${table_name}_bad_records.csv \
           ${empty_target} \
           ${hhr} \
           --source_data_format ${SOURCE_DATA_FORMAT} \
           --field_separator "${FIELD_SEPARATOR}" \
           --max_ignored_rows ${MAX_IGNORED_ROWS} \
           --null_value "${NULL_VALUE}" \
           --date_format "${DATE_FORMAT}" \
           --date_time_format "${DATE_TIME_FORMAT}" \
           --boolean_representation ${BOOLEAN_REPRESENTATION} \
           --skip_second_fraction \
           -v ${V_LEVEL} \
           >> ${TEMP_RESULTS_FILE} 2>> ${TEMP_RESULTS_FILE}
  if [ $? != 0 ]; then
    has_tsload_error=true
    echo "Error:  tsload failed to load ${file_name} into ${database_name}.${schema_name}.${table_name}" >> ${TEMP_RESULTS_SUMMARY_FILE}
    number_failed_loads=$((number_failed_loads+1))
  else
    echo "Success:  ${file_name} loaded successfully into ${database_name}.${schema_name}.${table_name}" >> ${TEMP_RESULTS_SUMMARY_FILE}
    number_successful_loads=$((number_successful_loads+1))
  fi

  # Move the loaded files to the old directory.
  ${MOVE_LOADED_FILES} ${fn} ${move_dir}
}

function should_ignore() {
  dir_to_check="$1"
  for ignore in ${IGNORE_DIRS[*]}; do [[ "${ignore}" == "${dir_to_check}" ]] && return 0; done
  return 1
}

# Controls the actual loading of data.
function load_data_files() {
  local data_dir=$1
  local schema_name=$2

  cd ${data_dir}
  # pwd
  # ls -l
  echo "Loading files from $data_dir for schema $schema_name."

  files=$(ls *${DATA_FILE_EXTENSION} 2> /dev/null | wc -l)
  if [[ ${files} -ge 1 ]]; then
    # load all data files, one at a time.
    for fn in `ls *${DATA_FILE_EXTENSION}`; do

      # see if the filename overrides the default empty target.
      # use all of the patterns to get the table name from the file name.
      if [[ ${fn} == *"_full"* ]]; then
        empty_target="--empty_target"
      elif [[ ${fn} == *"_incremental"* ]]; then
        empty_target=""
      else
        empty_target=${DEFAULT_EMPTY_TARGET}
      fi

      # the extension and anything after a - will be automatically removed.  Neither can be used in the table name.
      tn="`echo ${fn} | sed s/${DATA_FILE_EXTENSION}// | sed s/-.*// | sed s/_full// | sed s/_incremental//`"  
      for pattern in ${SED_PATTERNS[*]}; do
        tn="`echo ${tn} | sed s/${pattern}//`"
      done
      load_a_file ${fn} ${DATABASE_NAME} ${schema_name} ${tn} ${empty_target}
    done
  else
    echo "No ${DATA_FILE_EXTENSION} files found in $data_dir"
  fi

  # Check any sub-directories to see if there are multiple schemas to support.
  for dir in `ls -d */ 2> /dev/null`; do
    sn=$(basename ${dir})
    # see if the directory is in the list of ones to ignore.  
    should_ignore ${sn}
    if [[ $? != 0 ]]; then
      # load the data; the directory and schema are the same name.
      load_data_files ${sn} ${sn}
    fi
  done

  cd ..
}

# Clean up files, archiving data, etc.
function cleanup_from_load() {

  # if there were files loaded, save the results
  if [[ ${total_attempted_files} != 0 ]]; then
    mv ${TEMP_RESULTS_SUMMARY_FILE} ${RESULTS_FILE}
    cat ${TEMP_RESULTS_FILE} >> ${RESULTS_FILE}
    cp ${RESULTS_FILE} ${OLD_DIR}

    pushd . 2&>/dev/null
    cd ${OLD_DIR}/.. && tar czf ${OLD_DIR}.tar.gz ${THE_DATE_TIME} && rm -r ${OLD_DIR}
    popd 2&>/dev/null

    # clear out the old archives to save space if the value is defined.
    if [[ ${NBR_DAYS_TO_KEEP_OLD_FILE} ]]; then
      find ${OLD_DIR}/.. -type f -mtime +${NBR_DAYS_TO_KEEP_OLD_FILES} -name '*.gz' -execdir rm -- '{}' \;
    fi
  else
    rm ${TEMP_RESULTS_SUMMARY_FILE}
    rm -r ${OLD_DIR}
  fi

  rm ${LOADING_FILE} # remove the loading semaphore file

  if [ -f ${DATA_DIR}/${SEMAPHORE_FILE_NAME} ]; then
    rm ${DATA_DIR}/${SEMAPHORE_FILE_NAME}
  fi
}

# Sends email to indicate the results of the load.
function send_results_notification() {

  # only send if there were files that attempted to load.
  if [[ ${total_attempted_files} != 0 ]]; then
    subject="Success:  ${number_successful_loads} of ${total_attempted_files} files loaded at ${THE_DATE_TIME} for cluster ${CLUSTER_NAME}"
    body="The data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME} appears successful.  See attached load results."
    if [[ ${has_tsload_error} = true ]]; then
      subject="Error:  ${number_successful_loads} of ${total_attempted_files} files loaded and ${number_failed_loads} failed at ${THE_DATE_TIME} for cluster ${CLUSTER_NAME}"
      body="The data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME} had errors loading files or rows.  See attached load results."
      exit_value=1
    fi

    echo ${body}
    for address in ${RESULTS_EMAIL[*]}; do
      # TODO remove after working.
      echo ""
      echo "${body}" | mail -s "${subject}" -a ${RESULTS_FILE} ${address}
    done
  fi
}
  

#--------------------------------------- Main execution of script -------------------------------------------

# Get the input parameters and verify there is a file to use for configs.
while getopts 'f:h' opt
do
  case ${opt} in
    f) config_file=${OPTARG} 
    ;;
    h|?) usage 0 
    ;;
  esac
done

if [ ! -f "${config_file}" ]; then 
  usage -1
fi

source ${config_file}
echo "" > ${TEMP_RESULTS_SUMMARY_FILE}

check_directories                                  # check that directories exist and/or create - may exit with error

check_for_semaphore                                # checks to see if a semaphore is being used and, if so, if should run - may exit
check_already_loading                              # check if a process is already running - may exit if other running
load_data_files ${DATA_DIR} ${DEFAULT_SCHEMA_NAME} # load all data files starting in the DATA directory.
cleanup_from_load                                  # cleanup from the load
send_results_notification                          # sends notification that the load has occurred

# Show what happened.

if [[ ${total_attempted_files} != 0 ]]; then
  cat ${RESULTS_FILE}
else
  echo "No files loaded."
fi

