#!/bin/bash

# Copyright 2017 ThoughtSpot
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation 
# files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, 
# modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the 
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS 
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT 
# OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# TODO - Uncomment if needed.
# Needed when running from cron since this path is set in /home/admin/.bashrc  tsload is in this path.
# PATH=$PATH:/usr/local/scaligent/bin:/usr/local/scaligent/release/bin

# Loads all of the data from files in a staging area into ThoughtSpot and then moves the files to a new location.
# To use this file, change the settings and flags below.  

# Assumptions:
#   File names are of the format tablename[_full|_incremental|]-*.extension
#     _full | _incremental cause a full or incremental load.  If not specified, the default for full or incremental is used.
#     =* is optional and can be anything.  Everything from the - on is ignored.  This is useful timestamps, etc.
#   All formats are the same for all files including separators, enclosing characters, data/time formats, etc.

# TODO The following should be modified for your environment.
declare -r DATA_FILE_EXTENSION=".csv"                                  # extension for files to be loaded.
declare -r ROOT_DIR="/home/admin/test_load_files"                      # Root of where data, etc. will reside.
declare -r RESULTS_EMAIL=("you@thoughtspot.com")                       # email addresses to send the results to.
declare -r SEMAPHORE_FILE_NAME="stage_done"                            # name of a file that indicates all staging files are loaded.
declare -r DEFAULT_EMPTY_TARGET="--empty_target"                       # use if always empty target unless specified.
#declare -r DEFAULT_EMPTY_TARGET=""                                    # use if always incremental load (upserts) unless specified.

# Data and loaded file directories.  These don't normally need to change.
declare -r CLUSTER_NAME="`tscli cluster status | grep 'Cluster name' | sed 's/^.*: //'`"
declare -r THE_DATE_TIME="`date +"%Y-%m-%d_%H%M%S_%Z"`"                # date and time to use for load name.
declare -r DATA_DIR=${ROOT_DIR}/data                                   # location for the data to load.  Write new files here.
declare -r LOG_DIR=${ROOT_DIR}/logs                                    # directory to store load logs.
declare -r OLD_DIR="${ROOT_DIR}/old/${THE_DATE_TIME}"                  # directory to move files to.
declare -r BAD_RECORDS_DIR="${OLD_DIR}/bad_records"                    # directory with bad records.
declare -r RESULTS_FILE="${LOG_DIR}/${CLUSTER_NAME}-results-${THE_DATE_TIME}.txt" # stores the results of the data load.
declare -r LOADING_FLAG="${DATA_DIR}/loading"                          # flag to indicate we are currently loading.
declare -r V_LEVEL=0                                                   # logging verbosity level.  0-6.  0 recommended for production.

# TODO Uncomment the following if using a semaphore for reason to load.
# See if the semaphore has been set.  If not, exit since not ready to load.
# NOTE:  This approach should be avoided in favor of remote execution of the script.  Uncomment if using semaphore approach.
# if [ ! -e ${DATA_DIR}/${SEMAPHORE_FILE_NAME} ]; then
#   exit 0
# fi

# Create the needed directories. 
if [ ! -e ${DATA_DIR} ]; then
  mkdir -p ${DATA_DIR}
fi

if [ ! -e ${LOG_DIR} ]; then
  mkdir -p ${LOG_DIR}
fi

if [ ! -e ${OLD_DIR} ]; then
  mkdir -p ${OLD_DIR}
fi

if [ ! -e ${OLD_DIR}/bad_records ]; then
  mkdir -p ${OLD_DIR}/bad_records
fi

# loading is a flag that indicates this process is running.  Needed to avoid two copies running at once.
if [ -e ${LOADING_FLAG} ]; then
  exit 0
fi
touch ${LOADING_FLAG}

echo "" > ${RESULTS_FILE}

had_tsload_error=false # indicates if there was a tsload error.

# loads from a file into TS.  $1 is the root filename / tablename.
# TODO - change flags and values as necessary before deploying.
#      - you may also need to add a sed for any data manipulation after the file name.
function tsload_file {
  filename=$1 # $1 is filename
  tablename=$2 # $2 is tablename
  echo "loading ${tn} from ${fn}..."

  # determine empty_target flag.
  et=${DEFAULT_EMPTY_TARGET}
  if [[ ${filename} == *"_full"* ]]; then
    et="--empty_target"
  elif [[ ${filename} == *"_incremental"* ]]; then
    et=""
  fi

  # if the files are gzip change cat to zcat.
  cat ${filename} | dos2unix | \
    tsload --target_database your_database \
           --target_schema falcon_default_schema \
           --target_table ${tablename} \
           --bad_records_file ${OLD_DIR}/bad_records/${1}_bad_records.csv \
           ${et} \
           --source_data_format csv \
           --field_separator "," \
           --max_ignored_rows 10 \
           --has_header_row \
           --null_value "NULL" \
           --date_format "%Y-%m-%d" \
           --date_time_format "%Y-%m-%d %H:%M:%S" \
           --boolean_representation "1_0" \
           --skip_second_fraction \
           -v ${V_LEVEL} \
           >> ${RESULTS_FILE} 2>> ${RESULTS_FILE}
  if [ $? != 0 ]; then
    has_tsload_error=true
  fi

  # Move the loaded files to the old directory.
  mv ${fn} ${OLD_DIR}/
}

exit_value=0

# load the files using tsload.
# TODO:  If your table names have underscores or dashes, modify the sed below to keep them.
pushd ${DATA_DIR}
for fn in `ls *${DATA_FILE_EXTENSION}`; do
  tn="`echo ${fn} | sed s/${DATA_FILE_EXTENSION}// | sed s/-.*// | sed s/_.*//`"
  tsload_file ${fn} ${tn}
done

# remove the semaphore since we are done with loading.
# NOTE:  Uncomment if using semaphore.
#rm ${DATA_DIR}/${SEMAPHORE_FILE_NAME}
rm ${LOADING_FLAG}
cp ${RESULTS_FILE} ${OLD_DIR}

# check the success of the load.
cd ${OLD_DIR}

subject="Successful Data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME}"
body="The data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME} appears successful.  See attached load results."
if [[ ${has_tsload_error} = true ]]; then
  subject="Errors in Data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME}"
  body="The data load ${THE_DATE_TIME} for cluster ${CLUSTER_NAME} had errors loading files or rows.  See attached load results."
  exit_value=1
fi

echo ${body}
for address in ${RESULTS_EMAIL[*]}; do
  echo "${body}" | mutt -s "${subject}" -a ${RESULTS_FILE}  -- ${address}
done

# compress the backup folder
cd ${OLD_DIR}/.. && tar czf ${OLD_DIR}.tar.gz ${THE_DATE_TIME} && rm -r ${THE_DATE_TIME}

popd

exit ${exit_value}
